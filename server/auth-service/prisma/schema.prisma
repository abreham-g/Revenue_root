generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String?              @unique
  emailVerified       DateTime?
  password            String
  image               String?
  role                UserRole             @default(USER)
  accounts            Account[]
  posts               Post[]
  retailerPermissions RetailerPermission[]
  sessions            Session[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RetailerPermission {
  id         String       @id @default(cuid())
  userId     String
  retailerId String
  role       RetailerRole @default(DISABLED)
  retailer   Retailer     @relation(fields: [retailerId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, retailerId])
  @@index([retailerId])
  @@index([userId])
}

model Retailer {
  id                 String               @id @default(cuid())
  name               String               @unique
  percentageDiscount Int?
  cronJobs           CronJob[]
  permissions        RetailerPermission[]
}

model CronJob {
  id         String        @id @default(cuid())
  retailerId String
  status     CronJobStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime?     @updatedAt
  type       CronJobType   @default(FETCH_KEEPA_DATA)
  retailer   Retailer      @relation(fields: [retailerId], references: [id])
}

enum UserRole {
  USER
  ADMIN
}

enum RetailerRole {
  DISABLED
  VIEWER
  EDITOR
}

enum CronJobStatus {
  PENDING
  COMPLETE
  PROCESSING
}

enum CronJobType {
  FETCH_LINKS_AND_IMAGES
  FETCH_KEEPA_DATA
}
